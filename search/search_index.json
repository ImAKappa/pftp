{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome!","text":"<p>This short guide will help you go from zero programming experience to being comfortable writing in Python.</p>"},{"location":"#why-python","title":"\ud83d\udc0d Why Python?","text":"<p>Python is a language for communicating with your computer. Knowing Python will empower you to:</p> <ol> <li> <p>Automate repetitive tasks</p> <ul> <li>Getting updates from websites that change over time</li> <li>Moving, renaming, and merging files &amp; folders</li> <li>Formatting, sorting, and organizing text and images</li> </ul> </li> <li> <p>Create apps for work and entertainment</p> <ul> <li>Games: Pygame, Panda3D, RenPy</li> <li>Websites: mkdocs, Pynecone, Django</li> <li>Apps: Kivy, Anki</li> <li>3D Modelling: Blender integrates with Python</li> <li>Videos: Manim</li> <li>Computer Graphics: Taichi</li> <li>Dashboards: Dash</li> </ul> </li> <li> <p>Do modelling (not the fashion kind, although you could use Python to help you pick out an outfit)</p> <ul> <li>Databases</li> <li>Simulations &amp; Scientific Computing: NumPy, SciPy, PyMC3</li> <li>Machine learning: Tensorflow, PyTorch</li> </ul> </li> </ol> <p>If you're most people, you will likely find the most use from automating repetitive tasks with Python. Automation will be our focus for this guide.</p>"},{"location":"#reading-this-guide","title":"\ud83d\udcd6 Reading this guide","text":"<p>Programming is not the easiest thing to learn. Honestly, it's extremely frustrating at times. Despite this, it's a very rewarding skill. It can save you time \u23f3 and money \ud83d\udcb5, and will improve the way you think and problem-solve \ud83e\udde0.</p> <p>There are a lot of guides on learning Python. Most of them are ok. Too many of them assume you know a thing or two about programming. Too few remember what it is like to not know how to program. I don't claim my guide is the best place to learn to program with Python, but I am quite confident that it's a good place to start.</p> <p>I wrote this for people who have never programmed before, people whose primary experience using a computer consists of watching videos online, sending emails, maybe making a spreadsheet now and then or typing up a report. You don't need to be good at school to read this guide.</p> <p>However, you absolutely need:</p> <ol> <li>An open mind</li> <li>To be okay with failure</li> <li>To understand that you can always improve</li> </ol> <p>People mistakenly believe that they are not smart enough to program.</p> <p>This is backwards thinking!</p> <ul> <li>\ud83c\udfcb\ufe0f You are not too weak to go to the gym. You get strong from trying, failing, then trying again at the gym</li> <li>\ud83e\uddd8 You are not too easily distracted to meditate. You gain focus by trying, failing, then trying again to meditate</li> <li>\u270d\ufe0f You are not too bad with words to write. You become eloquent by trying, failing, then trying again to write.</li> <li>\ud83e\uddd1\u200d\ud83d\udcbb You are not too dumb to program. You get smart by trying, failing, then trying again to program.</li> </ul>"},{"location":"#technology-prerequisites","title":"\ud83d\udcbd Technology Prerequisites","text":"<p>While you don't need any prior programming experience, you should own or have access to a computer of some kind. The computer needs to have an operating system, like Windows 10 or Mac OS, and you should be familiar with how to use the computer to install and run applications.</p> <p>Also, you should be familiar with:</p> <ol> <li>Reading and writing in English</li> <li>Your keyboard (the <code>enter</code>/<code>return</code> key, <code>Ctrl</code>/<code>Cmd</code> keys, letters, numbers, space bar, etc.)</li> <li>Using a web browser, like Google Chrome or Mozilla Firefox</li> <li>Navigating a website</li> </ol>"},{"location":"1-Getting-Started/01_language/","title":"\ud83d\udc0d The Python Language","text":"<p>Python is famous for being an easy-to-learn, yet powerful, programming language. The Python language is, in some ways, very similar to English. Let's compare Python and English by looking at key components of languages in general: 1) Interpreters, 2) Syntax, and 3) Semantics.</p>"},{"location":"1-Getting-Started/01_language/#interpreters","title":"\ud83e\udde0 Interpreters","text":"<p>You can write instructions in English like</p> <pre><code>Hey, write the word 'apple' in uppercase letters\n</code></pre> <p>Of course, nothing will happen if you write down these instructions on a piece of paper, or if you say these instructions out loud in an empty room.</p> <p>Instructions in any language are only useful if there is someone there to interpret the instructions. So, let's say you text your friend the instructions to write \"apple\" in uppercase. They respond with \"APPLE\". Your friend is the interpreter for the instruction.</p> <p>The Python language is the same. On its own the language is kind of useless, it's just a bunch of rules for how to arrange words and numbers. You need a Python interpreter that can understand the instructions and execute them.</p> <pre><code>flowchart LR\n    lang([\"Hey, write 'apple' in upper case letters\"]) -- \"\ud83d\udc42 Listen\" --&gt; interp[\"Person\"]\n    interp[\"Person\"] -- \"\u270d\ufe0f Write\" --&gt; result([\"'APPLE'\"])\n    style interp fill:#36464e,stroke:#333,color:#fff</code></pre> <pre><code>flowchart LR\n    lang([\"print('apple'.upper())\"]) -- \"\ud83d\udc42 Parse\" --&gt; interp[\"Python Interpreter\"]\n    interp[\"Python Interpreter\"] -- \"\u270d\ufe0f Print\" --&gt; result([\"'APPLE'\"])\n    style interp fill:#36464e,stroke:#333,color:#fff</code></pre> <p>Where can I get a Python interpreter?</p> <p>While you could download the latest traditional1 Python interpreter from the Python Software Foundation, for this tutorial we will use Thonny. It comes with version 3.10 of the Python interpreter (the latest version is 3.11, as of time of writing). When we get more experience using Python, we will learn how to update to the latest Python interpreter.</p> <p>Python Interpreter Cost &amp; Licensing</p> <p>The Python interpreter is free. It's also open-source</p> <p>Follow the installation instructions for Thonny for your operating system (i.e. Windows or Mac)</p> <p>Thonny Initial Settings</p> <p>Make sure to pick \"Standard\"</p> <p></p> <p>When the software is finished installing, open it. You should see something like this:</p> <p></p>"},{"location":"1-Getting-Started/01_language/#syntax","title":"\ud83d\udcdd Syntax","text":"<p>Syntax means the correct (i.e. mutually agreed-upon, or comprehensible) way to structure sentences</p> <p>For example, in English we say \"My birthday is today!\", but we wouldn't say \"is !my today Birthday\" The second sentence uses the exact same words and punctuation, but it doesn't make sense. It doesn't use correct English syntax.</p> <p>Python also has a syntax; there is a right and wrong way to structure sentences in Python.</p> Language Comprehensible Incomprehensible \ud83d\udcdd English <code>Hey, write the word 'apple' in uppercase letters</code> <code>'apple' in, uppercase write Hey letters word the</code> \ud83d\udc0d Python <code>print('apple'.upper())</code> <code>Hey, write the word 'apple' in uppercase letters</code> <p>Let's revisit the sum example, where you texted your friend:</p> <pre><code>Hey, write the word 'apple' in uppercase letters\n</code></pre> <p>If you try typing this into Thonny, specifically the section of the app that says \"Shell\", then press <code>enter</code>:</p> <p></p> <p>The Python interpreter doesn't understand what we're saying, because we haven't structured the sentence correctly in the Python language. Unlike your friend, the Python interpreter won't bother to ask us to clarify or rephrase what we meant. It will give up trying to understand our instructions very quickly, but will usually tell us why it gave up. In this case, the interpreter gave up, or threw an error, because it didn't understand the syntax of the instruction we provided to it. The Python interpreter doesn't speak English, it speaks Python.</p> <p>Entering instructions</p> <p>After we finish typing an instruction, we need to enter the instruction into the interpreter by pressing the <code>enter</code>/<code>return</code> key on our keyboard; this is what we mean by entering an instruction. </p> <p>This is the same as when you type in a search query into Google or Bing. You have to hit enter for the search engine to actually start searching.</p> <p>After we enter an instruction, the Python interpreter will try to understand the instruction and, if it does, will return the result of the instruction on the screen</p> <p>Python can be tricky initially because:</p> <ol> <li>We're not yet fluent in the language</li> <li>We're used to human languages, which are a lot more flexible than Python2</li> </ol> <p>There are lots of valid ways to ask someone to write \"apple\" in uppercase letters, but in Python we say:</p> PythonEnglish <pre><code>print('apple'.upper())\n</code></pre> <pre><code>Hey, write the word 'apple' in uppercase letters\n</code></pre> <p></p>"},{"location":"1-Getting-Started/01_language/#semantics","title":"\ud83d\udca1 Semantics","text":"<p>You can have sentence with correct syntax, yet it doesn't make sense. The meaning, or semantics, of sentences are extremely important.</p> <p>Here's an example of a syntactically correct, but semantically meaningless, sentence in English:</p> <pre><code>Write the number 1.50 in upper case\n</code></pre> <p>Here's the same example in Python:</p> <pre><code>1.50.upper()\n</code></pre> <p>When you give the Python interpreter a semantically meaningless sentence, the interpreter will throw an error, but usually a different kind of error depending on what you were trying to do.</p> <p></p> <p>Errors</p> <p>The Python interpreter will throw lots of different kinds of errors. We will discuss types of errors and how to handle them later in the guide.</p> <p>Python is not English</p> <p>We have spent quite a bit of time emphasizing the similarities between Python and English to help us get comfortable with the idea of programming languages, but it is important to keep in mind that programming languages and natural languages are very different things.</p> <p>Python sometimes looks like English, and uses English words; this is a blessing and a curse for native Enlgish-speakers. English words give Python a sense of familiarity, but this may tempt you to write Python the way you would in English. In the beginning, you will find yourself trying to express things that seem completely valid and natural in English, but are nonsensical to the Python interpreter.</p> <p>To non-native English speakers, Python may seem more foreign. However this may make it easier to treat Python as something with its own system of rules, as something that works differently on a fundamental level from your native language.</p>"},{"location":"1-Getting-Started/01_language/#exercises","title":"\ud83c\udfcb\ufe0f\u200d\u2640\ufe0f Exercises","text":"<p>We'll look at a lot of examples of how to write Python with proper syntax throughout this tutorial. For now, I highly recommend you try the exercises below.</p> <p>Q1. What is an interpreter?</p> Answer <p>Something that can understand instructions in a language and execute those instructions</p> <p>For the English language, people are the interpreter.</p> <p>For Python, it is a piece of software called the Python Interpreter. </p> <p>Q2. What is syntax?</p> Answer <p>Syntax is the structure of sentences in a language.</p> <p>Q3. Imagine you want your friend to throw a frisbee at you. State whether each sentence has the correct syntax in English:</p> <p>i. \"Hey! Hey! Hey! Frisbee! Hey! Frisbee! Frisbee!\"</p> <p>ii. \"Hey, throw the Frisbee here!\"</p> <p>iii. \"May you please pass that rotating plastic disk to my general direction by means of sudden impulse using your hands?\"</p> <p>iv. \"Frisbee here now the !throw\"</p> Answer <p>i., ii., and iii., are perfectly valid ways to ask for a frisbee in English</p> <p>iv. is not valid English syntax</p> <p>Q4. Write the following sentence3 in lower case letters:</p> <pre><code>NOBODY EXPECTS THE SPANISH INQUISITION!\n</code></pre> Answer <p>The phrase is short enough that you could retype it in lower case yourself:</p> <pre><code>nobody expects the spanish inquisition!\n</code></pre> <p>But it's faster to use Python (and more scalable; imagine rewriting a much longer sentence by hand)</p> <p><pre><code>'NOBODY EXPECTS THE SPANISH INQUISITION!'.lower()\n</code></pre> or <pre><code>\"NOBODY EXPECTS THE SPANISH INQUISITION!\".lower()\n</code></pre></p> <p>The Python language is particular about many things, but quotation marks are not one of those things. It's up to you to use single-quotes or double-quotes, but it's good style to be consistent with your choice.</p> <p>Q5.</p> <p>Consider this quote4:</p> <pre><code>God creates dinosaurs. God destroys dinosaurs. God creates Man. Man destroys God. Man creates dinosaurs.\n</code></pre> <p>Using the string methods described in the documentation:</p> <p>i. Replace <code>dinosaurs</code> with <code>yogurt</code></p> <p>Hint</p> <p>If we want to replace words in a sentence, we can do this:</p> <pre><code>print(\"It is morning time\".replace(\"morning\", \"evening\"))\n</code></pre> <p>ii. Which letter occurs more frequently, <code>e</code> or <code>a</code>?</p> <p>Hint</p> <p>Try using something like: <pre><code>\"The quick brown fox jumped over the lazy dog.\".count(\"the\")\n</code></pre></p> Answer <p>Note that the <code>&gt;&gt;&gt;</code> represents the prompt in the \"Shell\" section of Thonny. You shouldn't type the arrows into the Shell.</p> <p>i.</p> <pre><code>&gt;&gt;&gt; 'God creates dinosaurs. God destroys dinosaurs. God creates Man. Man destroys God. Man creates dinosaurs.'.replace('dinosaurs', 'yogurt')\n'God creates yogurt. God destroys yogurt. God creates Man. Man destroys God. Man creates yogurt.'\n</code></pre> <p>ii. </p> <pre><code>&gt;&gt;&gt; 'God creates dinosaurs. God destroys dinosaurs. God creates Man. Man destroys God. Man creates dinosaurs.'.count('e')\n8\n&gt;&gt;&gt; 'God creates dinosaurs. God destroys dinosaurs. God creates Man. Man destroys God. Man creates dinosaurs.'.count('a')\n9\n</code></pre> <p>So, there are more <code>a</code>s that <code>e</code>s in the quote.</p> <p>Q6. If you haven't already, skim through the official Python tutorial. A lot of it might not make sense just yet, but you should still look through it to get some more context about Python</p> <p>Q7. Finally, and most importantly, why do you want to learn Python?</p> Possible answers <ol> <li>Develop industry-relevant skills</li> <li>I need to pass a course in school</li> <li>Automate boring, repetitive tasks at work and home</li> <li>Learn for the fun of it</li> <li>I'm soooooooooooo boooooooored</li> </ol> <ol> <li> <p>By \"traditional\", we mean the interpreter that most people and companies use. There's no \"pirated\" version of the Python interpreter because it's completely open-source and free! There are, however, several alternative implementations of the Python interpreter, like PyPy (for Python that runs fast), or MicroPython (for running Python on micro controllers). Most people should stick to the interpreter from the Python Software Foundation \u21a9</p> </li> <li> <p>In my opinion. The interpreters for natural languages, our brains, are extraordinarily complex, flexible, and powerful, and the power of a language tends to be limited to the complexity of its interpreter.\u00a0\u21a9</p> </li> <li> <p>Monty Python skit. By the way, the Python language was named after this comedy group, not the snake!\u00a0\u21a9</p> </li> <li> <p>Dr. Ian Malcolm, Jurrasic Park \u21a9</p> </li> </ol>"},{"location":"1-Getting-Started/02_programming/","title":"\ud83d\udc69\u200d\ud83d\udcbb Programming","text":""},{"location":"1-Getting-Started/02_programming/#editors","title":"\ud83e\ude9f Editors","text":"<p>Let's get familiar with the two main parts of Thonny.</p> <p></p> <ol> <li>The code editor: This is where we will write our Python code. We use this section when we write multiple lines of code that we want to execute all at once.</li> </ol> <p>Running programs</p> <p>Press the green run button to execute the code in the code editor </p> <ol> <li>The REPL: This stands for Read-Evaluate-Print-Loop. This bit is interactive. When we enter a valid Python instruction (that is, type the instruction after the <code>&gt;&gt;&gt;</code> then press the <code>enter</code>/<code>return</code> key), we will immediately see the result. We usually write short lines of code here when we want to test something quickly.</li> </ol> <p>Command History</p> <p>When using the REPL, you can press the <code>up</code> arrow key to load a previous command</p> <p>Thonny is an IDE: An Integrated Development Environment. An IDE is any kind of editor that has multiple sections that are for different things, like editing code, running coding interactively (like a REPL), and managing files.</p> <p>Code IDEs vs Word Processors</p> <p>MS Word and Google Docs are examples of word processors. These apps deal with rich text, which is text that is embellished with lots of extra notation called markup so that the text can have fancy styles like bolding, colours, highlights, and different sizes.</p> <p>However, all the markup makes it difficult to write Python code in MS Word. Please don't write code using Microsoft Word </p> <p>Instead we write Python code in a plain text file with the file extension <code>.py</code>. Plain text is the kind you would usually write in Notepad (Windows) or TextEdit (Mac). You can't change the styling of the text, but it's much simpler; it's plain.</p> <p>We use Thonny, instead of Notepad, because it has features that make it more convenient to edit Python code. These include (but are not limited to):</p> <ul> <li>Syntax highlighting: some words get a different colour, without extra markup</li> <li>Debugging: This feature lets you run code one instruction at a time</li> <li>Shell: This lets you run Python interactively </li> </ul> <p>To see your files, select \"View\" then check \"Files\" in the menu.</p> <p></p>"},{"location":"1-Getting-Started/02_programming/#coding-is-writing-is-thinking","title":"\ud83d\udca1 Coding is Writing is Thinking","text":"<p>Writing Python code is more than typing some words into Thonny. It is writing, and writing is thinking on paper. People who write well know how to sort out their thoughts, critique them, refine them, and express them in an accessible way to other people. The same can be said for Python. You can write convoluted, broken code, or write simple, elegant, and correct code that says nothing beyond what it needs to say, to do the things it needs to do.</p> <p>Just like writing, learning to code well takes time. Google developer and leading AI-researcher Peter Norvig wrote about this best in his blog post Teach Yourself Programming in Ten Years. Do not be tempted to skim! Read it over in its entirety to set your expectations for learning to code.</p> <p>Read it!</p> <p>Even if you don't understand most of it, please read Teach Yourself Programming in Ten Years. The blog post is aimed at people interested in software development, but even if that is not you, all I want you to get out of it is that learning to code will take time and effort, so don't worry if you feel it's taking a long time for you get the hang of Python. We're all in the same boat!</p>"},{"location":"1-Getting-Started/02_programming/#solving-problems-with-code","title":"\ud83d\udd28 Solving Problems with Code","text":"<p>It's important to have a good grasp of the problem you're trying to solve with Python (or knowing if you even need Python at all!).  For some problems, it makes sense to write a program, i.e. a recipe of computations. Allen Downey, author of the wonderful (free!) book Think Python, says that there are really only 5 kinds of instructions that compose a program:</p> Instruction Description Input Get data from the keyboard, a file, the internet, or some other device Output Display data on the screen, save it in a file, send it over the internet, etc Math Perform some number-crunching (add a number here, multiply some numbers there) Conditional Execution Check for certain conditions and run the appropriate code Repetition Perform some action repeatedly, usually with some variation each time <p>Basically, if you can express your problem as some combination of these instructions, you can write a program in Python to get your computer to solve your problem for you.</p>"},{"location":"1-Getting-Started/02_programming/#process-design","title":"\ud83d\udede Process &amp; Design","text":"<p>It's very easy to write a terrible essay; you simply need to write, and then stop writing. Writing a great essay takes research, planning, writing, and multiple rounds of revisions and gathering feed-back. A similar thing happens (or at least, should happen) when writing software (i.e. code). It's easy to write code that doesn't actually solve your problems correctly or robustly.</p> <p>In his book, Code Complete, Steve McConnell laid out a few key components of the software development process1:</p> Step of Process Description Problem definition What problem are we trying to solve? (Don't offer solutions yet!) Requirements development What features does our solution have to have? Does Python offer these features? Construction planning Think about how we could implement the solution, step by step Coding &amp; debugging Implement the solution in Python. Fix bugs. Testing Test! Test! Test! Write lots of tests for your Python code. Retest when you make changes"},{"location":"1-Getting-Started/02_programming/#scripts-vs-apps-vs-libraries","title":"\ud83d\udce6 Scripts vs Apps vs Libraries","text":"<p>A script is a short piece of code, usually in a single file, that does one main thing. For example, this script fetches a random useless fact from the internet:</p> uselessfact.py<pre><code>\"\"\"uselessfact.py\n\nThis script fetches a useless fact from the useless facts website\n\"\"\"\nfrom urllib import request\n# Data from the internet is passed around in a format called JSON\nimport json\n\n# Fetch useless fact from some website in JSON form\nresponse = request.urlopen(\"https://uselessfacts.jsph.pl/api/v2/facts/random\")\n\nif response.status == 200:\n    # Successful request!\n    print(\"Did you know?\")\n    # Convert JSON form to something easier to work with in Python\n    useless_fact = json.loads(response.read())\n    print(useless_fact[\"text\"])\nelif response.status == 404:\n        print(\"Uh oh, couldn't find a useless fact :(\")\nelse:\n    # Any other status code is a mystery...\n    print(\"Not sure what happend, but no useless fact :(\")\n</code></pre> <p>Try it yourself</p> <p>You don't need to how this code works at this point in the guide, but try typing this code into the code editor section of Thonny (the top portion, not the Shell). Then press the green run button, and look at the Shell section to see the result.</p> <p>Try re-running the script a few times to see different useless facts. </p> <p>Scripts are different from applications, or apps, which are bundles of code that you use to accomplish one or more tasks.  Apps are typically more complicated than scripts. Compare the script above to something like your calendar app, which can send notifications, set reminders, store data related to events, dates, and times, has a user interface, and can synchronize data across multiple devices.</p> <p>There is another kind of software called a library. A library is a bundle of code that is meant to be used in other people's code. Libraries tend to be pretty hard to write because you have to think about how the code will be used on many different operating systems, and write lot's of tests, publish documentation on how to use the library, and maintain it when people find bugs or are looking for more features. Python developers typically use the word \"packages\" instead of library. PyPI is where you can find Python packages. </p> <p>Specific to Python, we have modules. These are files with reusable bits of code. Python comes pre-installed with many modules. For example, we can use the <code>random</code> module which lets us write code that can generate random numbers</p> Python random module<pre><code>import random\nprint(\"Here's a random number from 1 to 10:\", random.randint(1, 10))\n</code></pre> <p>We need to write <code>import random</code> to tell the Python interpreter to load the code from the random module. It's a good thing the interpreter doesn't automatically load every single built-in module, otherwise it would take a while to start up. Better for us to explicitly ask for specific modules.</p> <p>Note</p> <p>In this guide, we will stick to writing modules and scripts</p>"},{"location":"1-Getting-Started/02_programming/#exercises","title":"\ud83c\udfcb\ufe0f\u200d\u2642\ufe0f Exercises","text":"<p>Q1. What's an IDE?</p> Answer <p>An Integrated Development Environment. It's a piece of software that makes it easier to write and edit code.</p> <p>Q2. What is a program? What are the different instruction types for a program?</p> Answer <p>A program is a sequence of instructions of how to perform a computation. In other words, a recipe of computations.</p> Instruction Description Input Get data from the keyboard, a file, the internet, or some other device Output Display data on the screen, save it in a file, send it over the internet, etc Math Perform some number-crunching (add a number here, multiply some numbers there) Conditional Execution Check for certain conditions and run the appropriate code Repetition Perform some action repeatedly, usually with some variation each time <p>Q3. What is the process for writing code?</p> Answer Part of Process Description Problem definition What problem are we trying to solve? (Don't offer solutions yet!) Requirements development What features does our solution have to have? Does Python offer these features? Construction planning Think about how we could implement the solution, step by step Coding &amp; debugging Implement the solution in Python. Fix bugs. Testing Test! Test! Test! Write lots of tests for your Python code. Retest when you make changes <p>Q4. What is the difference between a script, an app, and a library? Provide an example for each</p> Answer Type of Software Description Example Script Typically a single file of code that accomplishes a few simple/short tasks A script to download files from the internet App A bundle of software that people use to accomplish a few complicated tasks Thonny is an app for editing Python code Library A bundle of software that people can use in their own code pandas is data analysis library for Python <p>Q5. Consider this Python code that verifies if someone is old enough to drink</p> <pre><code>age = int(input(\"Please enter your age: \"))\n\ndrinking_age = 19\n\nif age == drinking_age:\n    print(\"You may enter the bar\")\nelse:\n    print(\"Sorry, you are not old enough to drink\")\n</code></pre> <p>Type it into Thonny, then run it. You can enter an age by typing it into the Shell, then pressing the <code>enter</code>/<code>return</code> key.</p> <p></p> <p>i. Does the program do what it's supposed to? Why or why not? Rerun the code and try a few different ages</p> Answer <p>No, the code produces an incorrect result for ages greater than 19. It should respond \"You may enter the bar\", but doesn't.</p> <p>This is because the code checks if <code>age</code> equals <code>drinking age</code>. Instead it should check if <code>age</code> is greater than or equal to <code>drinking_age</code>.</p> <p>Don't worry if you weren't sure how to read the Python script, yet (after all, we haven't properly gone over the basic words and phrases you can use in Python).</p> <p>If you were able to figure it out, great! Can you try and fix the code? </p> <p>ii. Can you think of any inputs you can give that will crash the program (i.e. cause it to throw an error)?</p> Answer <p>The program will crash if you provide inputs that don't make any sense, like letters or punctuation.</p> <p>If you haven't already, try running the code again and input <code>abc</code> or something similar.</p> <p>iii. Why is testing your code so important?</p> Possible Answer <p>It's easy to accidentally mistype something without realizing it, so you need to run tests to bring your attention to errors in your code</p> <p>It's also useful to think about all the invalid inputs that you or other people could give when using your Python scripts. Testing and then tweaking your code helps make sure your scripts are more robust.</p> <ol> <li> <p>The full software development process is much lengthier and much more involved, but this list is good enough for most of the software you write as beginner Python programmer\u00a0\u21a9</p> </li> </ol>"},{"location":"1-Getting-Started/03_resources/","title":"\ud83c\udf10 Resources","text":""},{"location":"1-Getting-Started/03_resources/#inspiration","title":"\ud83d\udca1 Inspiration","text":"<p>Not sure, what to make with Python? You can find lots of Python projects  on GitHub, the place where people store their apps, scripts, and libraries.</p>"},{"location":"1-Getting-Started/03_resources/#how-do-i-learn-python","title":"\ud83c\udfeb How do I learn Python?","text":""},{"location":"1-Getting-Started/03_resources/#exercises","title":"\ud83c\udfcb\ufe0f Exercises","text":"<p>Practice solving problems with Python. There really is no good substitute. Here are my reccomendations for a beginner:</p> <ol> <li>W3 Python Exercises</li> <li>Exercism</li> </ol> <p>Also, try to never copy-paste code. Instead, type it all out yourself to better memorize Python syntax.</p>"},{"location":"1-Getting-Started/03_resources/#asking-for-help","title":"\ud83d\ude4f Asking for help","text":"<p>Memorizing Python code is useful, but not always necessary</p> <p>I don't remember everything about Python, so when I forget things I usually:</p> <ol> <li>Google what I am trying to do, like this </li> <li> <p>Look through a popular forum called StackOverflow, especially if it's a more complicated problem (like this )</p> <ul> <li>Alternatively, you can google your programming question, then add the word \"StackOverflow\" to your search query, like this </li> </ul> </li> <li> <p>Peruse the official Python documentation </p> </li> <li> <p>Use \"cheatsheets\". Ideally, you would make your own as you continue to use the language, but just to get started you could use this popular Python cheatsheet</p> </li> </ol> <p>StackOverflow</p> <p>There's a running joke  that a software developer's job is just copy-pasting answers off of StackOverflow</p> <p>Given Python's popularity, there is an insane amount of beginner-friendly tutorials out there on the internet. But how do we know which one's are good? Here are my recommendations:</p>"},{"location":"1-Getting-Started/03_resources/#if-you-like-watching","title":"\ud83c\udfa5 If you like watching","text":"<ol> <li> <p>Python in a 100 seconds </p> <ul> <li>This video will not makes sense the first few times you watch it</li> <li>I put it here because it shows a sample of a lot of the features of Python that you will eventually learn</li> <li>The first time you watch it, make note of all the words or concepts you don't understand</li> <li>After spending some time writing Python (maybe after writing 5 - 10 personal projects), revisit this video and make note of things you have learned since the last time you watched it</li> </ul> </li> <li> <p>Corey Schafer's entire YouTube channel </p> <ul> <li>You can start here  </li> <li>Note that he doesn't use Thonny, but almost all the code he writes will work in Thonny</li> </ul> </li> <li> <p>Socratica's Python Playlist</p> <ul> <li>An interesting, almost cinematic approach to learning Python</li> </ul> </li> <li> <p>mCoding's entire YouTube channel </p> <ul> <li>You can start here </li> <li>He talks about beginner and advanced topics</li> </ul> </li> <li> <p>I Gave My Goldfish $50,000 to Trade Stocks by Michael Reeves</p> <ul> <li>A very choatic application of Python programming</li> <li>More entertainment than educational, and slightly offensive, but definitely impressive (and inspiring?)</li> </ul> </li> </ol>"},{"location":"1-Getting-Started/03_resources/#if-you-like-reading","title":"\ud83d\udcda If you like reading","text":"<ol> <li> <p>Think Python </p> <ul> <li>An excellent free book that explains how to think like a programmer, and solve problems using Python</li> <li>The approach to programming is similar to this guide (it discusses languages, problem-solving, etc), but it's more in-depth (and better written than my guide, in my opinion)</li> </ul> </li> <li> <p>Automate the Boring Stuff With Python  by Al Sweigart</p> <ul> <li>A practical free book that explains how to make programs that you can use to automate home and office work</li> </ul> </li> <li> <p>Composing Programs </p> <ul> <li>Really good, but more technical than Automate the Boring Stuff, and that can be intimidating</li> <li>Despite this, I think it's important for people to at least be aware of the more technical approach to programming</li> </ul> </li> </ol> <p>And that's it. There are a number of other great tutorials for the specific applications mentioned in the Welcome page, but generally I find it can be overwhelming to mention too many resources.</p> <p>Have fun learning Python!</p>"},{"location":"2-Guessing-Game/","title":"Guessing Game","text":"<p>The best way to learn programming is to just jump into it. We aboviously don't want to try something something too trivial because trivial examples are usually pretty useful and don't properly illustrate the utility of programming.</p> <p>But we also can't try something too hard, else we'll be overwhelmed. As useful as an automatic analytics report generator might be for your office work, those are usually fairly complicated (to design well). </p> <p>A guessing game is one of the best non-trivial programs to write.</p> <p>Here we will walk through how to build two guessing games:</p> <ol> <li>Number guessing game</li> <li>Word guessing game</li> </ol>"},{"location":"2-Guessing-Game/00_numbers/","title":"Number Guessing Game","text":"number.py<pre><code>\"\"\"number\n\nThis module simulates a number guessing game\n\"\"\"\nimport random\n\ndef main() -&gt; None:\n    # 1. Think of a random number from 1 to 100 (inclusive)\n    number = random.randint(1, 100+1)\n    print(\"I'm thinking of a number from 1 to 100\")\n    # 2. Ask for guess until they get it right\n    guess = input(\"Guess a number\")\n    while guess != number:\n        try:\n            guess = int(input(\"Try again\"))\n        except ValueError as err:\n            print(\"Please guess a number!\")\n    # 3. Every time user guesses, give feedback (\"Higher\" or \"Lower\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"2-Guessing-Game/01_words/","title":"Word Guessing Game","text":"settings.toml<pre><code>max_guesses = 10\nword_list = \"./words.txt\"\n</code></pre> word.py<pre><code>\"\"\"word\n\nA guessing game for words\n\"\"\"\nimport random\nfrom pathlib import Path\nfrom dataclasses import dataclass\nimport tomllib\nimport utils\n\n@dataclass\nclass Settings:\n    max_guesses: int\n    word_list: Path\n\ndef load_settings(config_file: Path) -&gt; Settings:\n    with open(config_file, mode=\"rb\") as file:\n        settings = tomllib.load(file)\n    return Settings(\n        max_guesses=settings[\"max_guesses\"], \n        word_list=Path(settings[\"word_list\"]),\n    )\n\ndef rand_word(words_path: Path) -&gt; str:\n\"\"\"Select a random word from a text file with words\"\"\"\n    with open(words_path, mode=\"r\", encoding=\"utf-8\") as file:\n        words = file.readlines()\n    return utils.strip_newline(random.choice(words))\n\ndef validate_guess(guess: str) -&gt; None:\n    if len(guess) &gt; 1:\n        raise ValueError(\"Guess a single letter!\")\n    if not guess.isalpha():\n        raise ValueError(\"The guess should be a letter!\")\n\n@dataclass\nclass Game:\n\"\"\"Bundle of data for game\"\"\"\n    title: str\n    word: str\n    guessed_letters: list[str]\n    max_guesses: int\n    incorrect_guesses: int = 0\n\n    def hidden_word(self) -&gt; str:\n        return \"\".join([letter if letter in self.guessed_letters else \"_\" for letter in self.word])\n\n    def make_guess(self, guess: str) -&gt; None:\n\"\"\"Add a guess to the guesses list\"\"\"\n        if guess in self.guessed_letters:\n            raise ValueError(\"You already guessed that!\")\n        self.guessed_letters.append(guess)\n        if guess not in self.word:\n            self.incorrect_guesses += 1\n\n    def is_won(self) -&gt; bool:\n        return self.hidden_word() == self.word\n\n    def is_over(self) -&gt; bool:\n        return self.incorrect_guesses &gt;= self.max_guesses\n\n    def draw(self) -&gt; None:\n\"\"\"Print the User Interface for the game\"\"\"\n        utils.clear_screen()\n        print(utils.fmt_title(self.title.upper()))\n        print()\n        print(\"Can you guess the word?\")\n        print()\n        print(self.hidden_word())\n        print()\n        print(f\"Guesses: {', '.join(self.guessed_letters)}\")\n        print(f\"{self.incorrect_guesses}/{self.max_guesses} incorrect\")\n\ndef main() -&gt; None:\n    # 1. Initialize game\n    settings = load_settings(Path(\"./settings.toml\"))\n    game = Game(\n        title=\"gword\",\n        word=rand_word(settings.word_list),\n        guessed_letters=list(),\n        max_guesses=settings.max_guesses,\n    )\n    game.draw()\n    # 2. Play game\n    while not (game.is_won() or game.is_over()):\n        try:\n            guess = input(\"Letter: \")\n            validate_guess(guess)\n            game.make_guess(guess)\n        except ValueError as err:\n            print(err)\n            continue\n        game.draw()\n    # 3. Display results after game over\n    if game.is_won():\n        game.draw()\n        print(\"You got it! :)\")\n    else:\n        print(\"Better luck next time!\")\n        print(f\"The word was '{game.word}'\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> utils.py<pre><code>\"\"\"utils\n\nUtility functions\n\"\"\"\nimport platform\nimport os\n\ndef strip_newline(s: str) -&gt; str:\n    return \"\".join(s.split())\n\ndef clear_screen() -&gt; None:\n\"\"\"Clears stdout\"\"\"\n    if platform.system() == \"Windows\":\n        os.system(\"cls\")\n    else:\n        os.system(\"clear\")\n\ndef fmt_title(s: str, underline=\"=\") -&gt; str:\n\"\"\"Format a title\"\"\"\n    return f\"{s}\\n{underline*len(s)}\"\n\nif __name__ == \"__main__\":\n    import time\n    demo_txt = \"Hello\\n\"\n    print(f\"{demo_txt!r}\")\n    print(fmt_title(strip_newline(demo_txt)))\n    print(\"Clearing screen in 2 seconds\")\n    time.sleep(2)\n    clear_screen()\n    print(\"Screen cleared!\")\n</code></pre>"},{"location":"3-Reading-and-Writing/03_reading/","title":"\ud83d\udcd4 Reading","text":""},{"location":"3-Reading-and-Writing/03_reading/#reading-python","title":"\ud83d\udc40 Reading Python","text":"<p>\"Code is more often read than written\" </p> <p>- Guido van Rossum  (creator of the Python programming language)</p> <p>Python is famous for being a readable language. The words we use in Python, and the way we string words together, is very reminiscent of English.</p> <p>For example, if we wanted to tell our friend to open Google Maps for various countries, we could write:</p> EnglishPython <p>Repeat the following for each country in this list of countries:</p> <p>\"Canada\", \"Italy\", \"Cambodia\", \"Kenya\", and \"Japan\"</p> <ol> <li>Type https://www.google.com/maps/place/ (the Google Maps url) into a new browser tab</li> <li>Add the country to the end of the url, like https://www.google.com/maps/place/Canada</li> <li>Hit enter to go to the website</li> </ol> maps.py<pre><code>import webbrowser\n\nmaps_url = \"https://www.google.com/maps/place/\"\ncountries = [\"Canada\", \"Italy\", \"Cambodia\", \"Kenya\", \"Japan\"]\n\nfor country in countries:\n    webbrowser.open_new_tab(maps_url + country)\n</code></pre> <p>Try it yourself</p> <p>Try typing this example into Thonny and running it using the green 'run' button.</p> <p>Now, although Python is a readable language, this example is still probably confusing. Take some time to study the example, and come up with 3 things that confuse you.</p> Possibly confusing things <ul> <li>What does <code>import webbrowser</code> mean?</li> <li>What's with the underscore in <code>maps_url</code>?</li> <li>Why is <code>webbrowser.open_new_tab(MAPS_URL + country)</code> indented?</li> <li>Why do we need the <code>.</code> and the round brackets <code>(</code> and <code>)</code></li> <li>What's with the colon (<code>:</code>), or the square brackets (<code>[</code> and <code>]</code>)?</li> </ul> <p>To develop our fluency, we will practice translating between English and Python.</p>"},{"location":"3-Reading-and-Writing/03_reading/#parts-of-speech","title":"\ud83d\udd23 Parts of Speech","text":"<p>When learning a language, it's helpful to know the parts of speech:</p> Part of Speech English Part of Speech Python Purpose/Description Noun (instance) that dog there, this chair Data <code>3</code>, <code>[1, 2]</code>, <code>\"Hello\"</code>, Something that exists Noun (type) animal, furniture Data type <code>int</code>, <code>list</code>, <code>str</code> A kind or type of thing Pronoun he, she, they, it, we, us, that, them Placeholder for a noun <code>age</code>, almost any word A placeholder/label/identifier for data Verb Run, repeat Function <code>print</code>, <code>range</code>, <code>math.sqrt</code> An action Conjunction and, but, or, not Logical operators <code>and</code>, <code>or</code>, <code>not</code> Joins statements with logic <p>This is a rough analogy, but it's a good place as any to start.</p>"},{"location":"3-Reading-and-Writing/03_reading/#variable-pronoun","title":"Variable (Pronoun)","text":"<p>In Python, we can identify data with a name like so:</p> <pre><code>my_name = \"Reyna\"\n</code></pre> <p>snake_case</p> <p>Python variable names are written in snake_case. This means</p> <ol> <li>All lower case letters</li> <li>Underscores in place of spaces</li> </ol> <p>Valid variable names</p> <p>Variable names can use the characters <code>A - Z</code>, <code>a - z</code>, <code>0 - 9</code>, <code>_</code></p> <p>Note that the first character cannot be a digit</p>"},{"location":"3-Reading-and-Writing/03_reading/#data-data-types-nouns","title":"Data &amp; Data Types (Nouns)","text":"<p>Data is information. In Python, this information comes in the form of numbers, text, and collections of numbers or text.</p>"},{"location":"3-Reading-and-Writing/03_reading/#numbers","title":"\ud83d\udd22 Numbers","text":"<p>Python has two kinds of numbers:</p> <ol> <li>Integers, like <code>1</code> or <code>345</code> or <code>-12</code></li> <li>Floats, like <code>3.14</code> or <code>-68.72</code>. These are similar to decimal numbers.</li> </ol> <p>Making numbers easier to read</p> <p>We could write numbers like <code>478862301</code>, but that's a little tricky to read. Lot's of languages have ways to make numbers easier to read, including Python.</p> Language Separator Syntax English comma (<code>,</code>) <code>478,862,301</code> French period (<code>.</code>) <code>478.862.301</code> Python underscore (<code>_</code>) <code>478_862_301</code>"},{"location":"3-Reading-and-Writing/03_reading/#strings","title":"\ud83c\udd70\ufe0f Strings","text":"<p>Strings are text.</p> <p>In Python, we surround text with double quotes (<code>\"</code>) or single-quotes (<code>'</code>). It's up to you which one to use, but be consistent.</p> <p>If you want to write text that spans multiple lines, use triple quotes:</p> <pre><code>\"\"\"This is some text.\nIt spans multiple lines\n\"\"\"\n\n'''Multi-line text can also\nbe surrounded\nwith triple-single quotes\n'''\n</code></pre>"},{"location":"3-Reading-and-Writing/03_reading/#lists","title":"\ud83e\uded9 Lists","text":"<p>Lists are a collection of items.</p> List of numbers List of strings<pre><code>[\"Apple\", \"Banana\", \"Pear\", \"Plum\", \"Strawberry\"]\n</code></pre> List of stuff<pre><code>\n</code></pre>"},{"location":"3-Reading-and-Writing/03_reading/#meta","title":"Meta","text":""},{"location":"3-Reading-and-Writing/03_reading/#comments","title":"\ud83d\udcac Comments","text":"<p>Comments are lines of text that the Python interpreter ignores. You usually write comments to annotate your code so that other people, and your future self, can understand your code.</p> EnglishPython <p>Write \"Hungry\" (this is how I am feeling right now)</p> <pre><code># This is how I am feeling right now\nprint(\"Hungry\")\n</code></pre>"},{"location":"3-Reading-and-Writing/03_reading/#keywords","title":"\ud83d\udd11 Keywords","text":"<p>Keywords are reserved words in Python; they mean something specific to the Python interpreter, in the same way that almost all of our English words mean something specific.</p> <p>The keywords include:</p> Keyword Purpose <code>for</code>, <code>while</code>, <code>else</code>, <code>continue</code>, <code>break</code>, <code>in</code>, <code>yield</code> Repetition/loops <code>if</code>, <code>elif</code>, <code>else</code>, <code>True</code>, <code>False</code>, <code>and</code>, <code>or</code>, <code>not</code> Conditional logic <code>def</code>, <code>return</code>, <code>lambda</code> Functions <code>import</code>, <code>from</code>, <code>as</code> Importing modules <code>try</code>, <code>except</code>, <code>finally</code>, <code>raise</code> Exception handling <code>del</code>, <code>global</code>, <code>nonlocal</code> Memory <code>class</code> Classes <code>assert</code> testing <code>async</code>, <code>await</code> Asynchronous programing <code>pass</code> Multiple uses <p>You cannot use these words as identifiers because otherwise the Python interpreter will get confused.</p> <p>Soft keywords</p> <p>Python 3.10 introduced Structral pattern matching , an extremely powerful feature to handle complex data structures. For example,</p> filematcher.py<pre><code>files = [\n    \"cute-puppies.png\",\n    \"national-security.pdf\",\n    \"pinball3000.exe\",\n    \"mywebsite.html\",\n    \"filematcher.py\",\n    \"mysterious-file.cia\",\n]\n\nfor file in files:\n    match file.split(\".\"):\n        case [filename, (\"png\" | \"jpg\" | \"webp\" | \"svg\")]:\n            print(f\"'{filename}' is an image file\")\n        case [filename, \"html\"]:\n            print(f\"'{filename}' is a website file\")\n        case [filename, (\"exe\" | \"pkg\")]:\n            print(f\"'{filename}' is an executable\")\n        case [filename, (\"pdf\" | \"docx\")]:\n            print(f\"'{filename}' is a document file\")\n        case [filename, \"py\"]:\n            print(f\"'{filename}' is Python source code!\")\n        case _:\n            print(f\"Not sure what kind of file '{file}' is...\")\n</code></pre> <p>Structural pattern matching uses the keywords <code>match</code>, <code>case</code>, and <code>_</code>, however, the Python interpreter knows to interpret these words as keywords in the specific context of structural pattern matching, and to interpret the words as identifiers otherwise.</p>"},{"location":"3-Reading-and-Writing/03_reading/#cheatsheets","title":"\ud83d\udcc3 Cheatsheets","text":"<p>The examples here are purposefully a little more complicated because there are already so many articles, books, and cheatsheets with simple Python examples.</p> <p>You don't have to remember everything</p> <p>If you ever forget how to do something in Python, see the resources section for advice on how to search for help</p> <p>I recommend studying (and typing out) the examples at Python Cheat Sheet . Ideally, you would work your way through all of the sections over a few weeks or months. But if you are short on time or energy, read the following in this order:</p> <ol> <li>Basics </li> <li>Built-in Functions </li> <li>Manipulating Strings </li> <li>String formatting </li> <li>Control Flow </li> <li>Functions </li> <li>Lists and Tuples </li> <li>Dictionaries </li> <li>Sets </li> <li>Comprehensions Step-by-Step </li> </ol>"},{"location":"3-Reading-and-Writing/03_reading/#examples","title":"Examples","text":"<p>For each example:</p> <ol> <li>Explain in English what you think the code does.</li> <li>Then type the code into the Thonny code editor (avoid copy-pasting, it is essential to develop muscle memory for writing Python)</li> <li>Finally, run it to see if you were right</li> </ol> <p>Type everything</p> <p>Type all the examples to better remember Python</p>"},{"location":"3-Reading-and-Writing/03_reading/#variables","title":"Variables","text":"EnglishPython <p>There are 60 seconds per minute, and 60 minutes per hour, so there are 60 * 60 = 3600 seconds in one hour</p> <pre><code>\"\"\"There are 60 seconds per minute, and 60 minutes per hour, so there\nare 60 * 60 = 3600 seconds in one hour\n\"\"\"\nseconds_per_minute = 60\nminutes_per_hour = 60\n\nseconds_per_hour = seconds_per_minute * minutes_per_hour\n\nprint(f\"There are {seconds_per_hour} seconds in one hour\")\n</code></pre>"},{"location":"3-Reading-and-Writing/03_reading/#while-loop","title":"While Loop","text":"EnglishPython <p>It's a birthday tradition to repeatedly chant \"Are you 1? Are you 2? Are you ...\" all the way up to the actual age of the birthday-person. Write a program that simulates this.</p> <pre><code>\"\"\"It's a birthday tradition to repeatedly chant \"Are you 1? Are you 2? Are you ...\"\nall the way up to the actual age of the birthday-person.\nWrite a program that simulates this.\n\"\"\"\nage = 12\nage_chant = 1\n\nwhile age_chant &lt; age:\n    print(f\"Are you {age_chant}?\")\n    age_chant = age_chant + 1\n\nprint(f\"Happy Birthday! You are {age_chant}!\")\n</code></pre>"},{"location":"3-Reading-and-Writing/03_reading/#if-elif-else","title":"If Elif Else","text":"EnglishPython <p>Write a program that will calculate income before and after taxes based on this bracketed tax scheme:</p> Tax bracket Percent tax &gt; $220,000 33% &gt; $150,000 29% &gt; $100,000 26% &gt; $50,000 20% &lt;= $50,000 15% <pre><code>\"\"\"Write a program that will calculate income before and after taxes based on this bracketed tax scheme:\n\n| Tax bracket | Percent tax |\n| --- | --- |\n| &gt; $220,000 | 33% |\n| &gt; $150,000 | 29% |\n| &gt; $100,000 | 26% |\n| &gt; $50,000 | 20% |\n| &lt;= $50,000 | 15% |\n\"\"\"\nincome = 57456.34\ntax = None\n\nif income &gt; 220_000:\n    tax = 0.33\nelif income &gt; 150_000:\n    tax = 0.29\nelif income &gt; 100_000:\n    tax = 0.26\nelif income &gt; 50_000:\n    tax = 0.20\nelif income &gt;= 0:\n    tax = 0.15\nelse:\n    print(\"Invalid income!\")\n\nif tax:\n    print(f\"Income before taxes: {income}\")\n    print(f\"Income after deducting {tax*100}% taxes: {income * (1.0 - tax)}\")\n</code></pre>"},{"location":"3-Reading-and-Writing/03_reading/#for-loop","title":"For Loop","text":"EnglishPython <p>Honey, can you get the groceries? We need:</p> Item Amount Milk 2 bags Eggs 1 carton Strawberry Shortcake 1 cake <p>Oh, and do keep the cake a surprise!</p> <pre><code>\"\"\"Honey, can you get the groceries? We need:\n\n| Item| Amount |\n| --- | --- |\n| Milk | 2 bags |\n| Eggs | 1 carton |\n| Strawberry Shortcake | 1 cake |\n\nOh, and do keep the cake a surprise!\n\"\"\"\ngroceries = {\n    \"milk\": \"2 bags\",\n    \"eggs\": \"1 carton\",\n    \"strawberry shortcake\": \"1\",\n}\n\nprint(\"Honey, we need:\")\n\nfor item, amount in groceries.items():\n    print(f\" {amount} {item}\")\n    if \"cake\" in item:\n        print(\"(Keep it a surprise!)\")\n</code></pre>"},{"location":"3-Reading-and-Writing/03_reading/#structural-pattern-matching","title":"Structural Pattern Matching","text":"EnglishPython <p>I have a list of files that I want to categorize. Write a program that will say the kind of each file.</p> <pre><code>\"\"\"I have a list of files that I want to categorize. Write a program that will say the kind of each file.\"\"\"\nfiles = [\n    \"cute-puppies.png\",\n    \"national-security.pdf\",\n    \"pinball3000.exe\",\n    \"mywebsite.html\",\n    \"birthday.py\",\n    \"mysterious-file.cia\",\n]\n\nfor file in files:\n    match file.split(\".\"):\n        case [filename, (\"png\" | \"jpg\" | \"webp\" | \"svg\")]:\n            print(f\"'{filename}' is an image file\")\n        case [filename, (\"csv\" | \"txt\" | \"md\")]:\n            print(f\"'{filename}' is a plain-text file\")\n        case [filename, (\"exe\" | \"pkg\")]:\n            print(f\"'{filename}' is an executable\")\n        case [filename, (\"pdf\" | \"docx\")]:\n            print(f\"'{filename}' is a document file\")\n        case [filename, \"py\"]:\n            print(f\"'{filename}' is Python source code!\")\n        case _:\n            print(f\"Not sure what kind of file '{file}' is...\")\n</code></pre>"},{"location":"3-Reading-and-Writing/03_reading/#functions","title":"Functions","text":"EnglishPython <p>I have an audio speaker, and if the volume is over 100 dBs it's super loud. Over 70 dBs is still pretty loud. Just be careful not to go over 120, it will definitely distort the audio.</p> <p>Oh, and make sure the speaker is actually on before you use it!</p> <pre><code>\"\"\"I have an audio speaker, and if the volume is over 100 dBs it's super loud.\nOver 70 dBs is still pretty loud.\nJust be careful not to go over 120, it will definitely distort the audio.\n\nOh, and make sure the speaker is actually on before you use it!\n\"\"\"\nimport random\n\ndef jumble(s: str) -&gt; str:\n\"\"\"Jumbles each word in a string\"\"\"\n    return \" \".join([\n        ''.join(random.sample(word, len(word))) for word in s.split(\" \")\n    ])\n\ndef speaker(audio: str, volume=40.0, on=True) -&gt; None:\n\"\"\"Simulates a speaker\n\n    :param audio: The audio to play\n    :param volume: In decibels (dBs)\n    :param on: The state of the speaker (on or off)\n    \"\"\"\n    if not on:\n        return\n    dB = 1\n    DISTORTION = 120.0*dB\n    SUPER_LOUD = 100.0*dB\n    LOUD = 70.0*dB\n\n    if volume &gt; DISTORTION:\n        print(jumble(audio))\n    elif volume &gt; SUPER_LOUD:\n        print(\" \".join(list(audio.upper())) + \" ! ! !\")\n    elif volume &gt; LOUD:\n        print(audio.upper())\n    else:\n        print(audio.lower())\n\nspeaker(\"Hello is this thing on?\", on=False)\nspeaker(\"Oh, wait, now it's working!\")\nspeaker(\"Never gonna give you up...\", volume=65.0)\nspeaker(\"Never gonna let you down...\", volume=20.2)\nspeaker(\"Never gonna run around and desert you\", volume=9001.0)\n</code></pre>"},{"location":"3-Reading-and-Writing/04_reuse/","title":"\u267b\ufe0f Reuse, Reduce, Recycle","text":"<p>You and your friends want to go out and do something fun, but none of you can agree on what to do. To help you make a decision, you decide to write a computer program that will make the decision for you.</p> <p>You create a file named <code>decision.py</code>, and add the following lines:</p> <pre><code>activities = [\n    \"Boardgame Cafe\",\n    \"Movies\",\n    \"Roller skating\",\n    \"Video Games\",\n    \"Karaoke\",\n    \"Amusement Park\"\n]\n</code></pre> <p>You don't have to write everything from scratch, you can reuse code that other people have written.</p> <p>Python is a batteries-included language; when you downloaded the interpreter, you also downloaded a lot of extra files of code for you to freely reuse. These code files are collectively called the standard library. You can read more about it at the Python Standard Library  documentation page.</p> <p>Python modules and packages</p> <p>We call a particular bundle of functionality a packages. For example, there is a standard library module for generating random numbers called <code>random</code>. You use it like this:</p> <pre><code>import random\n\n# Prints a random integer from 1 to 10\nprint(random.randint(1, 10))\n</code></pre> <p>Packages are composed of many Python modules. A module is a single Python file like <code>myfile.py</code></p> <p>Conflict with stdlib</p> <p>When you write your own modules, don't name them after modules found in the standard library. For example, if you have a module that does something with HTML you might be tempted to call it <code>html.py</code> But there already exists an <code>html</code> module in the stdlib.</p> <p>If you import a library that uses the stdlib <code>html</code>, it will throw an error because the Python interpreter will accidentally try to use your <code>html.py</code>. Chances are you haven't written all the code that it's in the stdlib <code>html</code> module, so your code will throw an error.</p>"},{"location":"3-Reading-and-Writing/04_reuse/#exercises","title":"\ud83c\udfcb\ufe0f Exercises","text":""},{"location":"3-Reading-and-Writing/06_writing/","title":"\u270d\ufe0f Writing","text":"<p>To learn a language, you usually practice speaking and writing. Start with basic sentences, then work up to paragraphs, then essays, then stories and reports.</p> <p>Python is a written language only. We wrote some simple sentences in the previous section. Now let's try writing short paragraphs.</p> <p>Reusing code</p> <p>Other smart, more experienced programmers have written Python code that we can reuse.</p> <p>Some of this reusable code comes with Python. It's called the Standard Library. The standard library isn't loaded into the intepreter by default, so we have to import it.</p> <p>For example,</p> <pre><code>import random\n\n# Gets a random integer from 1 to 10\nmy_secret_number = random.randint(1, 10)\nprint(my_secret_number)\n</code></pre> <pre><code>import random\nimport string\n\n# Gets3 random latin letters\nrand_letters = random.choices(string.ascii_letters, k=3)\nprint(rand_letters)\n</code></pre>"},{"location":"3-Reading-and-Writing/06_writing/#writing-paragraphs","title":"Writing Paragraphs","text":""},{"location":"3-Reading-and-Writing/06_writing/#1-login-authentication","title":"1. Login Authentication","text":"<p>Write a passive-agressive login authenticator.</p> <ol> <li>Let the user access the system if they give the correct password.</li> <li>But if they try to guess \"password\" tell them they need to try harder than that to get in!</li> <li>And if they try \"abc123\", give an exasperated response.</li> <li>And if they try anything longer than 12 characters, gently remind them that the password can't be that long.</li> <li>Also, the user only has 5 attempts to log in. If they fail all 5, print a message saying to try again later. </li> <li>Otherwise, tell them they entered the wrong password.</li> </ol> password.py<pre><code>password = \"password1\"\nattempts = ?\nmax_attempts = ?\nlogin_is_successful = ?\n\n# Your code here!\n</code></pre> Possible solution password.py<pre><code>password = \"password1\"\nattempts = 0\nmax_attempts = 5\nlogin_is_successful = False\n\nwhile attempts &lt; max_attempts:\n    guess = input(\"Enter password: \")\n\n    if guess == password:\n        login_is_successful = True\n        break\n    elif guess == \"password\":\n        print(\"You need to try harder than that to break in!\")\n    elif guess == \"abc123\":\n        print(\"Seriously? What kind of security do you think we have here?\")\n    elif len(guess) &gt; 12:\n        print(\"Sweetie, the password is 12 characters or less. Please try again!\")\n    else:\n        print(\"Sorry, you entered the wrong password\")\n    attempts = attempts + 1\n\nif login_is_successful:\n    print(\"Access granted. Not sure what you have access to, but enjoy nontheless\")\nelse:\n    print(\"Login failed. Try again in 36 minutes\")\n</code></pre>"},{"location":"3-Reading-and-Writing/06_writing/#2-fetching-useless-facts","title":"2. Fetching Useless Facts","text":"<p>When you type in a website URL in your browser, your browser has to download the website from another computer. Your browser asks the other computer for the website, and the other computer always responds with a status code.</p> <p>Two important status codes are:</p> <ul> <li><code>200</code>: everything is ok and the website has been successfully transferred to your browser</li> <li><code>404</code>: the other computer couldn't find the website files, so it says \"page not found\"</li> </ul> <p>Go to https://uselessfacts.jsph.pl/api/v2/facts/random </p> <p>If you see some text, great, the other computer returned a status code of 200.</p> <p>Now try https://uselessfacts.jsph.pl/api/v2/facts/random1 </p> <p>You probably got a <code>404</code> \"page not found\" status code.</p> <p>Based on what you just learned about status codes, try to complete the Python script below: </p> ueslessfact.py<pre><code>\"\"\"uselessfact.py\n\nThis script fetches a useless fact from the useless facts website\n\"\"\"\nfrom urllib import request\nimport json\n\nresponse = request.urlopen(\"https://uselessfacts.jsph.pl/api/v2/facts/random\")\n\nif response.status == ???: # Your code here\n    print(\"Did you know?\")\n    useless_fact = json.loads(response.read())\n    print(useless_fact[\"text\"])\nelif response.status == ???: # Your code here\n        print(\"Uh oh, couldn't find a useless fact :(\")\nelse:\n    print(\"Not sure what happend, but no useless fact :(\")\n</code></pre> Possible solution ueslessfact.py<pre><code>\"\"\"uselessfact.py\n\nThis script fetches a useless fact from the useless facts website\n\"\"\"\nfrom urllib import request\n# Data from the internet is passed around in a format called JSON\nimport json\n\n# Fetch useless fact from some website in JSON form\nresponse = request.urlopen(\"https://uselessfacts.jsph.pl/api/v2/facts/random\")\n\nif response.status == 200:\n    # Successful request!\n    print(\"Did you know?\")\n    # Convert JSON form to something easier to work with in Python\n    useless_fact = json.loads(response.read())\n    print(useless_fact[\"text\"])\nelif response.status == 404:\n        print(\"Uh oh, couldn't find a useless fact :(\")\nelse:\n    # Any other status code is a mystery...\n    print(\"Not sure what happend, but no useless fact :(\")\n</code></pre>"},{"location":"3-Reading-and-Writing/06_writing/#3-changemaker","title":"3. Changemaker","text":"<p>Prompt the user to enter an amount of dollars and cents. For example $1.18. Display the number of quarters, dimes, nickels, and pennies to make that amount, making sure to maximize the amount of higher-value coins.</p> <p>Examples: </p> <ul> <li>If the user entered $1.18 it should output: 4 quarters, 1 dimes, 1 nickels, 3 pennies</li> <li>If the user entered $1.02 it should output: 4 quarters, 0 dimes, 0 nickels, 2 pennies</li> </ul> Possible solution changemaker.py<pre><code>\"\"\"changemaker\n\nPrompt the user to enter an amount of dollars and cents. For example $1.18.\nDisplay the number of quarters, dimes, nickels, and pennies to make that amount,\nmaking sure to maximize the amount of higher-value coins.\n\nExamples: \n\n- If the user entered $1.18 it should output: 4 quarters, 1 dimes, 1 nickels, 3 pennies\n- If the user entered $1.02 it should output: 4 quarters, 0 dimes, 0 nickels, 2 pennies\n\"\"\"\nfrom typing import NamedTuple\nfrom enum import Enum\n\nclass Coin(NamedTuple):\n    name: str\n    value: float\n\nclass Change(Enum):\n    QUARTER = Coin(\"Quarter\", 0.25)\n    DIME = Coin(\"Dime\", 0.10)\n    NICKEL = Coin(\"Nickel\", 0.05)\n    PENNY = Coin(\"Penny\", 0.01)\n\ndef make_change(dollar_amount: float) -&gt; dict[str, int]:\n\"\"\"Counts change from `dollar_amount`\"\"\"\n    dollar_amount = round(dollar_amount, ndigits=2)\n    change_count = dict()\n    for change in Change:\n        coin: Coin = change.value\n        change_count[coin.name] = int(dollar_amount / coin.value)\n        dollar_amount -= change_count[coin.name] * coin.value\n        dollar_amount = round(dollar_amount, ndigits=2)\n    return change_count\n\nif __name__ == \"__main__\":\n    dollar_amounts = [1.18, 1.02, 22.16, 16299182456.22]\n    for dollar_amount in dollar_amounts:\n        change_count = make_change(dollar_amount)\n\n        print(f\"To make change from ${dollar_amount:,.2f}, we could use:\")\n        for coin, amount in change_count.items():\n            print(f\"\\t{amount:,} {coin}{'s' if amount != 1 else ''}\")\n        print()\n</code></pre>"},{"location":"3-Reading-and-Writing/06_writing/#4-powerball","title":"4. Powerball","text":"<p>Write a program that simulates the chances of winning the Powerball , and how much money you would realistically need to spend on to win.</p> <p>\"To play Powerball, you must fill in a draw ticket by choosing five main numbers up to 69 and a sixth 'Powerball' number from 1-26\"</p> <p>Use the code below to get started:</p> <p>1) Calculate your earnings</p> Matching Draw Amount ($) 5 + Powerball Jackpot ($60 million) 5 US $1,000,000 4 + Powerball US $50,000 4 US $100 3 + Powerball US $100 3 US $7 2 + Powerball US $7 1 + Powerball US $4 0 + Powerball US $4 <p>2) For notable winnings (Grand prize, 1 million, and 50 thousand), print a message</p> <p>3) Compare the stats from the simulation to the theoretical statistics. Are they close?</p> powerball.py<pre><code>\"\"\"powerball.py\n\nSimulates net profit from playing the powerball lottery many, many times\n\"\"\"\nimport random\n\nwinning_draw = set(random.choices(range(1, 70), k=5))\npowerball = random.choice(range(1, 27))\n\ntickets = 0\nearnings = 0\n\nNUM_DRAWS = 2_000_000\n\nprint(\"Notable winnings\".center(30, \"=\"))\nfor draw in range(NUM_DRAWS):\n    tickets += 1\n    my_draw = set(random.choices(range(1, 70), k=5))\n    my_powerball = random.choice(range(1, 27))\n    # matching_nums is the total count of matching numbers\n    matching_nums = len(my_draw.intersection(winning_draw))\n    i_have_powerball = my_powerball == powerball\n\n    # Code goes here...\n\nprint()\nprint(\"Summary\".center(20, \"=\"))\nTICKET_COST = 2\n# Don't forget to complete this!\nspent = ???\nprint(f\"I just spent ${spent:,.2f} on lottery tickets :0\")\nprint(f\"I earned ${earnings:,.2f}\")\nprint(f\"My net profit is ${earnings - spent:,.2f} :')\")\n</code></pre> Possible solution powerball.py<pre><code>\"\"\"powerball.py\n\nSimulates net profit from playing the powerball lottery many, many times\n\"\"\"\nimport random\n\nwinning_draw = set(random.choices(range(1, 70), k=5))\npowerball = random.choice(range(1, 27))\n\ntickets = 0\nearnings = 0\n\n# This script is inefficient; it takes around 12s to run 5,000,000 iterations\nNUM_DRAWS = 1_000_000\n\nprint(\"Notable winnings\".center(30, \"=\"))\nfor draw in range(NUM_DRAWS):\n    tickets += 1\n    my_draw = set(random.choices(range(1, 70), k=5))\n    my_powerball = random.choice(range(1, 27))\n    matching_nums = len(my_draw.intersection(winning_draw))\n    i_have_powerball = my_powerball == powerball\n\n    if matching_nums == 5:\n        if i_have_powerball:\n            print(\"OHMYGAH I WON!\")\n            earnings += 60_000_000\n        else:\n            print(\"It's just a small loan of a million dollars\")\n            earnings += 1_000_000\n    elif matching_nums == 4 and i_have_powerball:\n        print(\"Cool 50k :)\")\n        earnings += 50_000\n    elif matching_nums == 4 or (matching_nums == 3 and i_have_powerball):\n            earnings += 100\n    elif matching_nums == 3 or (matching_nums == 2 and i_have_powerball):\n        earnings += 7\n    elif i_have_powerball or (matching_nums == 1 and i_have_powerball):\n        earnings += 4\n    else:\n        continue\n\nprint()\nprint(\"Summary\".center(20, \"=\"))\nTICKET_COST = 2\nspent = TICKET_COST * tickets\nprint(f\"I just spent ${spent:,.2f} on lottery tickets :0\")\nprint(f\"I earned ${earnings:,.2f}\")\nprint(f\"My net profit is ${earnings - spent:,.2f} :')\")\n</code></pre>"},{"location":"4-Hocus-Focus/01_hocusfocus/","title":"\ud83e\udeb6 Hocus Focus","text":"<p>How do you focus so well?\"</p> <p>I can't. At best I can study for 25 minutes. Then I need a break. But usually 5 minutes of just looking at puppy photos is all I need to cool down my brain</p> <p>That's kinda weird, but also sounds cute</p> <p>Uh, yeah I guess, but it works.</p> <p>So, do you use an app for that? Like a pomodoro timer or something?</p> <p>I tried a few, but I didn't really vibe with them. Plus, none of them would show me puppies during my break, so I made my own</p> <p>Really, how?</p> <p>I wrote a Python script</p> <p>Ok, cool, but like how?</p>"},{"location":"4-Hocus-Focus/01_hocusfocus/#setup","title":"Setup","text":"<p>Well, first I made a file called <code>focus.py</code>.</p> <p>Then I wrote a little blurb that explains what the code is supposed to do plus some starter code:</p> focus.py<pre><code>\"\"\"focus\n\nThis module helps me focus by showing me puppy photos after a focus period,\nand a \"time to to focus\" message after a quick break.\n\"\"\"\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>What's a module?</p> <p>Oh right, it's just a bundle of all the Python code in a single file.</p> <p>Ok, cool. What about that <code>if name main</code> thing?</p> <p>It's mostly a good practice to put it there, but it might take a while to explain properly1.</p> <p>The basic idea is you write all your code underneath that <code>def main():</code> bit, where the word <code>pass</code> is, then when you run the code, your computer looks for that <code>if name main</code> section and sees <code>main()</code> and is like \"Oh I should run all the code that's under the <code>def main():</code> section\".</p> <p>The <code>def</code> is short for <code>define</code>, because I'm defining a block of code with a name called <code>main</code></p>"},{"location":"4-Hocus-Focus/01_hocusfocus/#timer","title":"Timer","text":"<p>Sure, I sort of get it. But where's all the timer stuff and the puppy photos?</p> <p>Don't worry I'm getting there. Then I wrote:</p> focus.py<pre><code>\"\"\"focus\n\nThis module helps me focus by showing me puppy photos after a focus period,\nand a \"time to to focus\" message after a quick break.\n\"\"\"\nimport time\n\ndef start_focus():\n    for second in range(60 * 25):\n        # Pause 1 second\n        time.sleep(1)\n        print(f\"[FOCUS] {second+1} seconds has passed\")\n\ndef start_break():\n    for second in range(60 * 5):\n        # Pause 1 second\n        time.sleep(1)\n        print(f\"[BREAK] {second+1} seconds has passed\")\n\ndef main():\n    start = input(\"Start focus? [y]/n: \")\n    if start == \"y\":\n        start_focus()\n        start_break()\n    elif start == \"n\":\n        print(\"Ok, stopping app\")\n    else:\n        print(f\"Expected 'y' or 'n', instead got {start}. Stopping app.\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Ok, wait I think I can read that. You've defined two extra blocks of code called <code>start_focus</code> and <code>start_break</code></p> <p>Yeah, exactly.</p> <p>And in the <code>main</code> block, the script asks you if you want to start, then you say 'y' for yes, and 'n' for no. If you say yes, then it will start the focus timer, and then the break timer.</p> <p>Yep, and if you say <code>n</code> or some other random thing, then the script will just stop.</p> <p>But what's with those numbers, the 60, 5, and 25? Or does that mean 25 minute focus and 5 minute break?</p> <p>Yeah, it's 25 minutes times 60 seconds per minute, so you get 1500 seconds. The code only works with seconds, that's why. Although, now that I think about it, I could probably make the code clearer. Hold on, let me update it:</p> focus.py<pre><code>\"\"\"focus\n\nThis module helps me focus by showing me puppy photos after a focus period,\nand a \"time to to focus\" message after a quick break.\n\"\"\"\nimport time\n\ndef start_focus():\n    SEC_PER_MIN = 60\n    FOCUS_MIN = 25\n    for second in range(SEC_PER_MIN * FOCUS_MIN):\n        # Pause 1 second\n        time.sleep(1)\n        print(f\"[FOCUS] {second+1} seconds has passed\")\n\ndef start_break():\n    SEC_PER_MIN = 60\n    BREAK_MIN = 5\n    for second in range(SEC_PER_MIN * BREAK_MIN):\n        # Pause 1 second\n        time.sleep(1)\n        print(f\"[BREAK] {second+1} seconds has passed\")\n\ndef main():\n    start = input(\"Start focus? [y]/n: \")\n    if start == \"y\":\n        start_focus()\n        start_break()\n    elif start == \"n\":\n        print(\"Ok, stopping app\")\n    else:\n        print(f\"Expected 'y' or 'n', instead got {start}. Stopping app.\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Does that make more sense?</p> <p>Yeah, a little. But I don't get what the <code>time.sleep(1)</code> is for</p> <p>Oh, so basically I'm telling the code to pause, or <code>sleep</code>, for 1 second. You see how it says <code>for second in range(SEC_PER_MIN * FOCUS_MIN)</code> and inside the range is the number of seconds?</p> <p>The code counts up one by one until the number of seconds, like 1500 in the focus timer, and every time it counts up, it pauses (<code>sleep</code>s) for 1 second. So in total it will sleep for 1500 seconds for the focus period.</p> <p>I could have done <code>time.sleep(1500)</code> but I wanted to print a message every second.</p> <p>Why the dot? And how come you have to import time? Why don't you need to export time?</p> <p>Time is another module, a python file, that someone else wrote. When I want to use blocks of code that come with the <code>time</code> module, I use <code>module.block</code>. Also need to explicitly tell the computer that I want to use the <code>time</code> module, otherwise how would it know? And I don't need to export anything, I didn't write my module to be used by other people.</p> <p>What about the lines with the <code>#</code> symbol?</p> <p>Oh those are comments to remind me what the code is doing. The computer ignores those, but they're a useful reminder.</p> <p>So then I ...</p> <p>Wait, one last thing. Or maybe a few last things.</p> <p>Yeah?</p> <p>How come you do <code>second + 1</code>? And what's with the <code>f</code> in <code>f\"[FOCUS] {second+1} seconds has passed\"</code>, and the curly brackets?</p> <p>So, computers start counting from 0, so if I just used <code>second</code> without the <code>+ 1</code>, the computer would print </p> <pre><code>[FOCUS] 0 seconds has passed\n[FOCUS] 1 seconds has passed\n</code></pre> <p>But with the <code>second + 1</code>, the computer prints:</p> <pre><code>[FOCUS] 1 seconds has passed\n[FOCUS] 2 seconds has passed\n</code></pre> <p>This might be silly, but do you actually print out paper every time you run the script?</p> <p>Oh lol no, by <code>print</code> I mean the script will display some text on the screen. The script is not a fancy app; there's no buttons or user interface or anything. It's all completely text-based. It was a fair question.</p> <p>About the <code>f</code> and curly braces, the <code>f</code> (short for <code>format</code>) tells the computer that to insert insert data inside the curly braces. Without it, the script would literally print <code>{second}</code> instead of an actual number.</p> <pre><code>[FOCUS] {second} seconds has passed\n[FOCUS] {second} seconds has passed\n</code></pre> <p>And of course, the curly braces surround the placeholder text.</p> <p>Ok, thanks, I think that makes sense</p> <p>Yeah no problem. Coding is kind hard because there's all these extra things you have to remember to write.</p>"},{"location":"4-Hocus-Focus/01_hocusfocus/#puppies","title":"Puppies","text":"<p>Alright, so I think I get the timer part, but what about the puppies?</p> <p>Right, so then I added some code to repeat the focus-break sessions however many times I wanted.</p> focus.py<pre><code>\"\"\"focus\n\nThis module helps me focus by showing me puppy photos after a focus period,\nand a \"time to to focus\" message after a quick break.\n\"\"\"\nimport time\nimport webbrowser\n\ndef start_focus():\n    SEC_PER_MIN = 60\n    FOCUS_MIN = 25\n    for second in range(SEC_PER_MIN * FOCUS_MIN):\n        # Pause 1 second\n        time.sleep(1)\n        print(f\"[FOCUS] {second+1} seconds has passed\")\n\ndef start_break():\n    SEC_PER_MIN = 60\n    BREAK_MIN = 5\n    webbrowser.open(\"https://eyebleach.me/dogs/\")\n    for second in range(SEC_PER_MIN * BREAK_MIN):\n        # Pause 1 second\n        time.sleep(1)\n        print(f\"[BREAK] {second+1} seconds has passed\")\n    # Back to work!\n    webbrowser.open(\"https://www.animalbehaviorcollege.com/wp-content/uploads/2021/11/DogCatMoney-768x564.jpg\")\n\ndef main():\n    NUM_FOCUS_SESSIONS = 3\n    for session in range(NUM_FOCUS_SESSIONS):\n        print(f\"Session {session+1}/{NUM_FOCUS_SESSIONS}\")\n        start = input(\"Start focus? [y]/n: \")\n        if start == \"y\":\n            start_focus()\n            start_break()\n        elif start == \"n\":\n            print(\"Ok, stopping app\")\n            break\n        else:\n            print(f\"Expected 'y' or 'n', instead got {start}. Stopping app.\")\n            break\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>And of course, for the puppies I included some code that opens a browser tab (the <code>import webbrowser</code> and <code>webbrowser.open()</code> bits) to https://eyebleach.me/dogs/</p> <p>After the break is over, it opens another image showing some working animals to remind me to get back to work lol.</p> <p>Awww the puppies are so cute! But why is it called eyebleach?</p> <p>Ah, normally people use the site after they accidentally see something traumatizing online.</p> <p>...</p> <p>\ud83d\ude05 </p> <p>Anyways, that's it. That's the script.</p> <p>Neat! Do you think you could help me write some code to do something similar? Like, I get what you did, but I wouldn't be able to write that myself</p> <p>Yeah of course. And don't worry, it took a few tries to get right, coding is hard \ud83d\ude2d. Actually, I could just send you the file, and I'll help you modify it slightly.</p> <p>What do like to do during breaks? I'm guessing you do other stuff instead of looking at puppy photos.</p> <p>Oh I do like to look a pictures, but I prefer looking at birds with arms when I take study breaks.</p> <p>And to think you called me weird \ud83d\ude44</p> <ol> <li> <p><code>if __name__ == \"__main__\"</code> is used to tell the Python interpreter to run specific sections of code only when the file is run as the main source file. Sometimes, we want to borrow code from other modules without actually running the borrowed code in our main module, and the <code>if __name__ == \"__main__\"</code> line prevents that. The statement is important to have, but a good explanation would detract from the main focus of the conversation.\u00a0\u21a9</p> </li> </ol>"},{"location":"5-Office-Work/","title":"\ud83c\udfe2 Office Work","text":"<p>Examples for how to automate boring, tedious, or repetitive office tasks</p>"},{"location":"5-Office-Work/Excel/","title":"Excel","text":"xlmerge.py<pre><code>\"\"\"xlmerge.py\n\nMerge separate Excel file into one\n\"\"\"\nfrom pathlib import Path\nimport pandas as pd\n\ndef main() -&gt; None:\n    root = Path(\"data\")\n    xls: dict[Path, pd.DataFrame] = {}\n    for file in root.glob(\"*.xlsx\"):\n        xl = pd.read_excel(file)\n        xls[file] = xl\n    with pd.ExcelWriter(root/\"combined.xlsx\") as writer:\n        for path, xl in xls.items():\n            xl.to_excel(writer, path.stem, index=False)\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"5-Office-Work/Files/clutterfree/","title":"Clutterfree","text":"<p>Don't forget to include an empty:</p> __init__.py main.py<pre><code>\"\"\"clutterfree\n\nThis module sorts files in a folder.\n\nUseful for,ganizing your downloads folder.\n\"\"\"\nfrom pathlib import Path\nfrom enum import Enum\nfrom collections import Counter\nfrom pprint import pprint\n\nclass FileCategory(Enum):\n    AUDIO = \"audio\"\n    IMAGE = \"image\"\n    TEXT = \"text\"\n    VIDEO = \"video\"\n    OFFICE = \"office\"\n    MISC = \"misc\"\n    FOLDER = \"folder\"\n\ndef count_file_extensions(dir: Path) -&gt; Counter:\n\"\"\"Gets a list of unique file extensions in directory\"\"\"\n    files_exts = [p.suffix for p in dir.iterdir()]\n    return Counter(files_exts)\n\ndef file_category(file: Path) -&gt; FileCategory:\n\"\"\"Returns file category given file extension\"\"\"\n    extension = file.suffix.lstrip(\".\")\n    if extension in (\"odt\", \"pptx\", \"ppt\", \"docx\", \"xls\", \"xlsx\", \"odp\", \"pdf\", \"key\", \"pages\"):\n            return FileCategory.OFFICE\n    elif extension in (\"mp3\", \"wav\", \"flac\"):\n        return FileCategory.AUDIO\n    elif extension in (\"webm\", \"mov\", \"mp4\", \"avi\"):\n        return FileCategory.VIDEO\n    elif extension in (\"py\", \"js\", \"txt\", \"json\", \"csv\", \"html\", \"css\"):\n        return FileCategory.TEXT\n    elif extension in (\"bmp\", \"png\", \"jpeg\", \"tiff\", \"jpg\", \"gif\"):\n        return FileCategory.IMAGE\n    elif file.is_dir() or extension in (\"zip\"):\n        return FileCategory.FOLDER\n    else:\n        return FileCategory.MISC\n\ndef move_file(file: Path) -&gt; None:\n\"\"\"Moves a file to a directory named after the category of the file\"\"\"\n    category_dir = file.parent/Path(file_category(file).value)\n    category_dir.mkdir(exist_ok=True)\n    file.rename(category_dir/file.name)\n\ndef main() -&gt; None:\n    root = Path(\"downloads\")\n    pprint(count_file_extensions(root))\n    for file in root.iterdir():\n        move_file(file)\n    # TODO: Handle the case where the script is run repeatedly\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> fakefiles.py<pre><code>\"\"\"fakefiles\n\nThis module generates fake files for testing\n\"\"\"\n\nimport faker\nfrom pathlib import Path\nimport shutil\n\ndef new_fake_files(fake: faker.Faker, root: Path, n: int) -&gt; None:\n    for _ in range(n):\n        file = root/Path(fake.file_name())\n        file.write_text(\"This is a fake file!\")\n\ndef new_fake_folders(root: Path, n: int) -&gt; list[Path]:\n    for i in range(n):\n        dir = root/Path(f\"fakefolder-{i}\")\n        dir.mkdir(exist_ok=True)\n\ndef empty_dir(dir: Path) -&gt; None:\n    shutil.rmtree(dir)\n    dir.mkdir()\n\ndef main() -&gt; None:\n    fake = faker.Faker()\n    root = Path(\"downloads\")\n    empty_dir(root)\n    new_fake_files(fake, root, n=22)\n    new_fake_folders(root, n=5)\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"5-Office-Work/Files/dating/","title":"Dating","text":"<p>Adding dates to files</p> main.py<pre><code>\"\"\"dating\n\nThis module adds the last modified date to a file name\n\"\"\"\nfrom datetime import datetime\nimport os\nfrom pathlib import Path\nimport time\n\ndef modification_date(filename: Path) -&gt; datetime:\n    t = os.path.getmtime(filename)\n    return datetime.fromtimestamp(t)\n\ndef prepend_modified_date(root: Path) -&gt; None:\n\"\"\"Prepends the last modified date of each file to the name of the file\"\"\"\n    for file in root.iterdir():\n        last_modification = modification_date(file)\n        file.rename(root/f\"{last_modification:%Y-%b-%d}-{file.name}\")\n\ndef main() -&gt; None:\n    root = Path(\"fakedata\")\n    prepend_modified_date(root)\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"5-Office-Work/Files/zippy/","title":"Zippy","text":"<p>Don't forget to include an empty:</p> main.py<pre><code>\"\"\"zippy\n\nThis module provides functions for zipping and unzipping a collection of folders\n\"\"\"\n\nfrom pathlib import Path\nimport uuid\nimport shutil\nfrom zipfile import ZipFile\n\ndef empty_dir(dir: Path) -&gt; None:\n    shutil.rmtree(dir)\n    dir.mkdir()\n\ndef new_fake_folders(root: Path, n: int) -&gt; None:\n\"\"\"Generates fake folders in root\"\"\"\n    for _ in range(n):\n        folder = root/Path(f\"some-folder-{uuid.uuid4()}\")\n        folder.mkdir()\n        file = folder/Path(f\"my-file-{uuid.uuid4()}.txt\")\n        file.write_text(\"This is a fake file!\")\n\ndef zip_all_folders(root: Path) -&gt; None:\n\"\"\"Zips all folders in the `root` directory\"\"\"\n    for file in root.iterdir():\n        if file.is_dir():\n            shutil.make_archive(root/file.name, \"zip\", file)\n\ndef remove_unzipped(root: Path) -&gt; None:\n\"\"\"Removes all unzipped folders\"\"\"\n    for file in root.iterdir():\n        if file.is_dir():\n            shutil.rmtree(file)\n\ndef extract_all_folders(root: Path) -&gt; None:\n\"\"\"Extracts all zip archives\"\"\"\n    for file in root.iterdir():\n        if file.suffix == \".zip\":\n            with ZipFile(file, \"r\") as zip_ref:\n                zip_ref.extractall(root/file.stem)\n\ndef remove_zipped_folders(root: Path) -&gt; None:\n\"\"\"Removes zip archives in a folder\"\"\"\n    for file in root.iterdir():\n        if file.suffix == \".zip\":\n            file.unlink()\n\ndef main() -&gt; None:\n    root = Path(\"fakedata\")\n    root.mkdir(exist_ok=True)\n    empty_dir(root)\n    new_fake_folders(root, n=100)\n    zip_all_folders(root)\n    remove_unzipped(root)\n    # extract_all_folders(root)\n    # remove_zipped_folders(root)\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"5-Office-Work/PDF/","title":"\ud83d\udcc4 PDF","text":"<p>Packages:</p> <ul> <li>PyPDF2</li> </ul>"},{"location":"5-Office-Work/PDF/extracttext/","title":"Extract Text","text":"pdftext.py<pre><code>\"\"\"pdftext\n\nThis module extracts text from PDFs\n\"\"\"\nfrom pathlib import Path\nfrom PyPDF2 import PdfReader\nfrom io import StringIO\nfrom typing import Optional\n\n\ndef describe_pdf(pdf: PdfReader) -&gt; None:\n\"\"\"Describes properties of the PDF\n\n    :param pdf: PdfReader Object\n    \"\"\"\n    print(\"Metadata\".center(20, \"=\"))\n    for field, data in pdf.metadata.items():\n        field = field.strip(\"/\")\n        print(f\"{field:&lt;20}{data}\")\n    print(f\"{'Pages':&lt;20}{len(pdf.pages)}\")\n\n\ndef extract_all_text(pdf: PdfReader, pages: Optional[range] = None) -&gt; str:\n\"\"\"Extracts text from every page in the document\n\n    :param pdf: PdfReader object\n    :param pages: Selected page numbers. This range is INCLUSIVE\n    \"\"\"\n    text = StringIO()\n    if not pages:\n        pages = range(len(pages))\n    else:\n        # Convert page numbers to indices\n        pages = range(pages.start - 1, pages.stop, pages.step)\n    for page_idx in pages:\n        page_number = page_idx + 1\n        page_divider = f\"Page {page_number}\".center(20, \"=\")\n        text.write(f\"\\n{page_divider}\\n\")\n        page = pdf.pages[page_idx]\n        text.write(page.extract_text())\n    return text.getvalue()\n\n\ndef main() -&gt; None:\n    # File source: https://www.almanac.com/sites/default/files/webform/pdf/almanac-start-a-garden.pdf\n    file = Path(\"./almanac-start-a-garden.pdf\")\n    print(f\"Extracting text from '{file.absolute()}'\")\n\n    with open(file, mode=\"rb\") as f:\n        my_pdf = PdfReader(f)\n        describe_pdf(my_pdf)\n        text = extract_all_text(my_pdf, pages=range(1, 3))\n    print(text)\n\n\nif __name__ == \"__main__\":\n    program_name = \"PDF Text Extractor\"\n    print(f\"{program_name}\\n{'-'*len(program_name)}\")\n    main()\n</code></pre>"},{"location":"5-Office-Work/Random/","title":"\ud83c\udfb1 Random","text":"<p>Packages:</p> <ul> <li>Faker</li> </ul>"},{"location":"5-Office-Work/Random/fakedata/","title":"Fake data","text":"fakedata.py<pre><code>\"\"\"fakedata\n\nThis module generates fake business data and exports to an Excel file\n\"\"\"\nimport pandas as pd\nfrom faker import Faker\nfrom pathlib import Path\n\n\ndef fake_businesses(fake: Faker, sample_size: int) -&gt; pd.DataFrame:\n\"\"\"Generates fake business data\"\"\"\n    fields = {\n        \"Business Name\": fake.company,\n        \"Purpose\": fake.bs,\n        \"CEO\": fake.name,\n        \"Tagline\": fake.catch_phrase,\n        \"Address\": fake.address,\n        \"Email\": fake.ascii_company_email,\n        \"Website\": fake.domain_name,\n        # Add more generators here!\n    }\n    data = {\n        field: [generator() for _ in range(sample_size)]\n        for field, generator in fields.items()\n    }\n    return pd.DataFrame(data)\n\n\ndef main() -&gt; None:\n    fake = Faker()\n    df = fake_businesses(fake, 200)\n    print(df)\n    file = Path(\"./business.xlsx\")\n    df.to_excel(file, index=False, sheet_name=\"Fake Businesses\")\n    print()\n    print(f\"Created '{file.absolute()}'\")\n\n\nif __name__ == \"__main__\":\n    program_name = \"Fake Data Generator\"\n    print(f\"{program_name}\\n{'-'*len(program_name)}\")\n    main()\n</code></pre>"},{"location":"5-Office-Work/Random/fakedata/#challenge","title":"\ud83c\udfcb\ufe0f\u200d\u2640\ufe0f Challenge","text":"<p>Generate a collection of fake dating app profiles. Each profile should have:</p> <ul> <li>username</li> <li>name</li> <li>sex</li> <li>address</li> <li>email</li> <li>birthdate</li> <li>phone number</li> </ul> <p>Look through the faker documentation for fake data providers to help you create this dataset.</p>"},{"location":"5-Office-Work/Random/groups/","title":"Groups","text":"groups.py<pre><code>\"\"\"groups\n\nModule for randomly sorting things into groups\n\"\"\"\nimport random\n\npeople = [\n    \"Robert Walker\",\n    \"Cassandra Walters\",\n    \"Benjamin Hodges\",\n    \"Susan Hammond\",\n    \"Michele Jones\",\n    \"Michelle Stone\",\n    \"Diane Walker\",\n    \"Mr. Troy Woodard\",\n    \"Emma Hartman\",\n    \"Joshua Smith\",\n    \"Sharon Parker\",\n    \"David Reynolds\",\n    \"Donald Mullins\",\n    \"Jacob Blair\",\n    \"Richard George\",\n    \"Scott Meyer\",\n    \"James Banks\",\n    \"Richard Porter\",\n    \"Christopher Ramos\",\n    \"William Martinez\",\n]\n\nif __name__ == \"__main__\":\n    # Shuffle a few times\n    shuffle_amount = 4\n    for _ in range(shuffle_amount):\n        random.shuffle(people)\n\n    # Create groups\n    group_size = 2\n    for group_number, i in enumerate(range(0, len(people), group_size)):\n        print(f\"Group {group_number+1}\".center(20, \"=\"))\n        group = people[i:i+group_size]\n        print(\"\\n\".join(group))\n        print()\n</code></pre>"},{"location":"5-Office-Work/Strings/","title":"Strings","text":""},{"location":"5-Office-Work/Strings/htmlstrings/","title":"HTML Strings","text":"striphtml.py<pre><code>\"\"\"striphtml\n\nThis module strips html tags from blocks of text\n\"\"\"\n\nfrom io import StringIO\nfrom html.parser import HTMLParser\n\n\nclass HTMLStripper(HTMLParser):\n\"\"\"Class that strips html tags from text\"\"\"\n\n    def __init__(self):\n        super().__init__()\n        self.reset()\n        self.strict = False\n        self.convert_charrefs = True\n        # A buffer for string data\n        self.text = StringIO()\n\n    def handle_data(self, data: str) -&gt; None:\n\"\"\"Adds data (within html tags), to string buffer\"\"\"\n        self.text.write(data)\n\n    def get_data(self):\n\"\"\"Returns value in string buffer\"\"\"\n        return self.text.getvalue()\n\n\ndef strip_tags(html: str) -&gt; str:\n    s = HTMLStripper()\n    s.feed(html)\n    return s.get_data()\n\n\ndef main():\n    source_html = \"\"\"&lt;address&gt;\n  &lt;p&gt;\n    Chris Mills&lt;br /&gt;\n    Manchester&lt;br /&gt;\n    The Grim North&lt;br /&gt;\n    UK\n  &lt;/p&gt;\n\n  &lt;ul&gt;\n    &lt;li&gt;Tel: 01234 567 890&lt;/li&gt;\n    &lt;li&gt;Email: me@grim-north.co.uk&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/address&gt;\n    \"\"\"\n    msg = \"Stripped HTML\"\n    print(f'{msg}\\n{\"-\"*len(msg)}')\n    stripped_input = strip_tags(source_html)\n    print(stripped_input)\n    print()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"5-Office-Work/Transcription/","title":"Transcription","text":"transcription_ffmpeg.py<pre><code>\"\"\"transcription (ffmpeg)\n\nThis module transcribes audio files (.wav)\n\"\"\"\nimport subprocess\nimport sys\nimport ast\nfrom pathlib import Path\nfrom dataclasses import dataclass\nfrom io import StringIO\nfrom vosk import Model, KaldiRecognizer, SetLogLevel\n\n@dataclass\nclass WavConfig:\n    sample_rate: int\n\n@dataclass\nclass Config:\n    wav: WavConfig\n    model: Path\n    read_bytes: int\n\ndef fmt_title(s: str, underline = \"=\") -&gt; str:\n    return f\"{s}\\n{underline*len(s)}\"\n\ndef main() -&gt; None:\n    config = Config(\n        wav=WavConfig(sample_rate=16_000),\n        model=Path(\"vosk-model-en-us-0.22-lgraph\"),\n        read_bytes=4_000,\n    )\n\n    if not config.model.exists():\n        raise FileNotFoundError(f\"Could not find model at '{config.model}'\")\n\n    model = Model(model_path=str(config.model))\n    rec = KaldiRecognizer(model, config.wav.sample_rate)\n\n    audio_file = Path(sys.argv[1])\n    if not audio_file.exists():\n        raise FileNotFoundError(f\"Could not find audio at '{audio_file}'\")\n\n    # Command to format wav file as PCM Mono\n    cmd_fmt_wav = [\n        \"ffmpeg\", \"-loglevel\", \"quiet\", \"-i\", str(audio_file),\n        \"-ar\", str(config.wav.sample_rate) , \"-ac\", \"1\", \"-f\", \"s16le\", \"-\"\n    ]\n\n    # Allocate buffer for transcribed audio\n    transcription = StringIO()\n\n    print()\n    print(fmt_title(\"Initiating transcription\"))\n    with subprocess.Popen(cmd_fmt_wav, stdout=subprocess.PIPE) as process:\n        data = bytes(\"init\", encoding=\"utf-8\")\n        while len(data) &gt; 0:\n            data = process.stdout.read(config.read_bytes)\n            if rec.AcceptWaveform(data):\n                result: str = rec.Result()\n                result: dict[str, str] = ast.literal_eval(result)\n                transcription.write(result[\"text\"])\n                transcription.write(\"\\n\")\n                print(f\"[Log::Heard]: {result['text']}\")\n\n    print()\n    print(fmt_title(f\"Transcription for '{audio_file}'\"))\n    print(transcription.getvalue())\n\nif __name__ == \"__main__\":\n    SetLogLevel(0)\n    try:\n        main()\n    except FileNotFoundError as err:\n        print(err)\n</code></pre>"},{"location":"6-Theory-and-Practice/01_computers/","title":"Computers","text":""},{"location":"6-Theory-and-Practice/01_computers/#behind-the-emerald-curtain","title":"Behind the Emerald Curtain","text":""},{"location":"6-Theory-and-Practice/01_computers/#abstraction","title":"Abstraction","text":"<p>Watch this video, at least twice. I can't explain abstraction any better than the video, so please watch it.</p> <p>How Binary Works, and the Power of Abstraction</p>"},{"location":"6-Theory-and-Practice/02_languages/","title":"Languages","text":"<p>We revisit the idea of languages.</p>"},{"location":"6-Theory-and-Practice/02_languages/#types-of-languages","title":"Types of languages","text":"<p>Natural vs Formal languages</p> <p>Natural: * English * French * Hungarian</p> <p>Formal * Mathematics * Python * Rust</p> <p>General Purpose vs Domain-Specific</p> <p>General: * English * Python</p> <p>DSL: * Pig-Latin * HTML * SQL * DNA &amp; Proteins (Life!)</p>"},{"location":"6-Theory-and-Practice/02_languages/#tooling","title":"Tooling:","text":"Tool Purpose English Python Linter Point out errors, bugs, style violations Grammarly Ruff Formatter Tidy up the presentation Word, InDesign Black Syntax Highlighting N/A (possibly Word, InDesign) Highlight.js Type Checker N/A (possibly an editor) PyRight Version-Control Word (with Track Changes) Git Environment/Dependency Manager N/A (Context &amp; Audience) hatch, poetry, pip, conda <p>Natural languages:</p> <ul> <li>Grammarly/Microsoft Editor</li> <li>GPTs</li> <li>MS Word</li> </ul>"},{"location":"7-Production-Ready/","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"7-Production-Ready/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"7-Production-Ready/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"7-Production-Ready/00-Python-Setup/","title":"\ud83d\udc0d Python Setup","text":"<p>Download and install Python 3 for you operating system.</p> <p>\u2705 Add Python to PATH</p> <p>Make sure to click the checkbox that says \"Add Python to PATH\"</p> <p>Once Python has finised installing, test your installation</p> WindowsMacOS <p>Search and open <code>PowerShell</code>, then type</p> <pre><code>python --version\n</code></pre> <p>Search and open <code>Terminal</code>, then type</p> <pre><code>python3 --version\n</code></pre>"},{"location":"7-Production-Ready/01-Environment-Setup/","title":"\ud83c\udf0e Environment Setup","text":"<p>Once you have Python installed, we need to create a new folder in your filesystem.</p> <p>But we are going to do it from the command line</p> WindowsMacOS <p>Open <code>PowerShell</code> again, then enter each line, one by one</p> <p>Open <code>Terminal</code> again, then enter each line, one by one  </p> <pre><code>mkdir Projects\n</code></pre> <p>mkdir</p> <p>The <code>mkdir</code> command makes a directory (a folder)</p> <pre><code>cd Projects\n</code></pre> <p>mkdir</p> <p>The <code>cd</code> command changes to a directory</p> <pre><code>mkdir projectname\n</code></pre> <pre><code>cd projectname\n</code></pre>"},{"location":"7-Production-Ready/01-Environment-Setup/#virtual-environment","title":"Virtual Environment","text":"<p>When you have different projects that depend on the same package, you might have a scenario where project A needs version 2 of a package, but project B needs version 3 of a package.</p> <p>To avoid this conflict, it's a good idea to create a virtual environment. You can think of it like a container that isolates the packages from different projects</p> <p>Create a virtual environement inside your <code>projectname</code> directory</p> WindowsMacOS <pre><code>python -m venv venv\n</code></pre> <pre><code>python3 -m venv venv\n</code></pre> <p>venv</p> <p>Python comes with a package called <code>venv</code> (short for virtual environment),  and we are telling this package to create a virtual environment called <code>venv</code></p> <p>Next activate the environment</p> WindowsMacOS <pre><code>.\\venv\\Scripts\\Activate.ps1\n</code></pre> <pre><code>source ./venv/bin/activate\n</code></pre> <p>Besides your prompt you should now see the name of the virtual environment in round brackets</p>"},{"location":"7-Production-Ready/02-Editor-Setup/","title":"\ud83d\udcdd Editor Setup","text":"<p>We will use jupyter lab to edit code</p> <p>Install jupyterlab</p> WindowsMacOS <pre><code>python -m pip install jupyterlab\n</code></pre> <pre><code>python3 -m pip install jupyterlab\n</code></pre> <p>Then add the virtual environment to Jupyter</p> <pre><code>ipython kernel install --user --name=venv\n</code></pre> <p>Then run jupyter lab</p> <pre><code>jupyter lab\n</code></pre> <p>Your browser will open up to a new page, then click on the tile that says <code>venv</code> under the Notebooks section</p> <p>Save the notebook, and rename to <code>mynotebook.ipynb</code></p>"},{"location":"7-Production-Ready/02-Editor-Setup/#test-your-setup","title":"Test your setup","text":"<p>In the little box with your cursor, type</p> <pre><code>print(\"Hello\")\n</code></pre> <p>Then press <code>shift</code> and <code>enter</code> keys</p>"},{"location":"7-Production-Ready/02_tools/","title":"\ud83d\udd28 Python Developer Tools","text":"<p>In summary, these are the tools I typically use for serious Python development:</p> Tool Name IDE VS Code Package manager <code>pip</code> Environment manager <code>hatch</code> Language Server Pylance (VS Code) Type Checker Pyright (VS Code) Version Control <code>git</code> Documentation generator <code>mkdocs</code> Package-level Testing <code>pytest</code> Environment-level Testing <code>tox</code> Profiling <code>cProfile</code> Debugging <code>pdb</code> Formatter <code>black</code> Linter <code>ruff</code>, <code>pylint</code> Shell <code>PowerShell 7</code>, <code>Bash</code> (Windows Terminal)"},{"location":"7-Production-Ready/02_tools/#ide","title":"IDE","text":"<p>Feel free to stick to Thonny if you feel comfortable with it. When you don't feel like as much of a beginner, consider trying these popular IDEs:</p> <ol> <li> <p>Visual Studio Code.</p> </li> <li> <p>PyCharm</p> </li> </ol>"},{"location":"7-Production-Ready/02_tools/#package-management","title":"Package management","text":"<p>I use tend to use hatch (although it is an environment manager; <code>pip</code> is technically the package manager). Other good alternatives include Poetry </p>"},{"location":"7-Production-Ready/03_beyondpython/","title":"\ud83d\uddfb Beyond Python","text":"<p>Practice makes permanent</p> <p>Use flashcards to remember syntax</p> <p>Use coding challenges to develop fluency</p> <ul> <li>Leetcode</li> <li>Capture the Flag</li> <li>Hackathon</li> </ul> <p>Learn from existing projects</p> <p>Make something you care about!</p> <p>Get a job using Python</p> <p>Learn frameworks</p> <ul> <li>Django/Flask</li> <li>PyTorch/Tensorflow/Sci-kit</li> <li>PyMC</li> </ul>"},{"location":"7-Production-Ready/03_beyondpython/#multi-lingual","title":"Multi-lingual","text":"<p>Learn other languages!</p> <p>Recommended languages (this will take several years to get through, btw):</p> <ol> <li>JavaScript - similar difficulty to Python, powers websites</li> <li>TypeScript - harder, but useful</li> <li>Scala - very similar to Python, but strong, static typing</li> <li>C#, Kotlin, Dart - Object oriented programming </li> <li>Java - very similar</li> <li>F#, OCaml - Functional programming</li> <li>Haskell - harder, but useful</li> <li>Lisp, Clojure, Racket - different, but should learn</li> <li>Julia - a Lisp-y language similar to Python, learn if interested in scientific computing</li> <li>C - Learn how computers actually work</li> <li>Assembly - bare-bones programming</li> <li>Rust - Systems programming, concurrency, very difficult</li> <li>C++ - also very difficult, but for different reasons</li> </ol> <p>Novel and/or Research languages</p> <ol> <li>Pony - actor-based concurrency</li> <li>Zig - C alternative</li> <li>Unison - concurrency</li> <li>Lobster, Odin - game dev</li> <li>Austral - linear type system</li> <li>Koka - effectful programming</li> </ol> <p>Weird and Wacky</p> <ol> <li>LOLCode</li> <li>Chef</li> <li>BrainFuck</li> </ol> <p>Make your own language:</p> <ul> <li>Crafting Interpreters</li> </ul>"}]}